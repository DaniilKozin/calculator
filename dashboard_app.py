import os
import json
import shutil
import pandas as pd
import numpy as np
import streamlit as st
import altair as alt
from datetime import datetime, date
import zipfile
import io

# File paths
DAILY_CSV = "pool1_nov2025_daily.csv"
MONTHLY_CSV = "pool1_nov2025_monthly.csv"
MONTHLY_TIERS_ZNX_CSV = "pool1_nov2025_monthly_tiers_znx.csv"
SAVED_RESULTS_DIR = "saved_results"
SAVED_PARAMS_FILE = "generation_params.json"

# Default values (will be overridden by sidebar)
DEFAULT_POOL_SIZE = 50000
DEFAULT_STABLE_RATIO = 0.6
DEFAULT_GROWTH_RATIO = 0.4

# Functions for saving and loading generation results
def save_generation_result(params, name):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    if not os.path.exists(SAVED_RESULTS_DIR):
        os.makedirs(SAVED_RESULTS_DIR)
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    result_dir = os.path.join(SAVED_RESULTS_DIR, f"{timestamp}_{name}")
    os.makedirs(result_dir, exist_ok=True)
    
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    params_file = os.path.join(result_dir, SAVED_PARAMS_FILE)
    with open(params_file, 'w', encoding='utf-8') as f:
        json.dump(params, f, ensure_ascii=False, indent=2, default=str)
    
    # –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å CSV —Ñ–∞–π–ª—ã
    import shutil
    if os.path.exists(DAILY_CSV):
        shutil.copy2(DAILY_CSV, os.path.join(result_dir, DAILY_CSV))
    if os.path.exists(MONTHLY_CSV):
        shutil.copy2(MONTHLY_CSV, os.path.join(result_dir, MONTHLY_CSV))
    if os.path.exists(MONTHLY_TIERS_ZNX_CSV):
        shutil.copy2(MONTHLY_TIERS_ZNX_CSV, os.path.join(result_dir, MONTHLY_TIERS_ZNX_CSV))
    
    return result_dir

def get_saved_results():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    if not os.path.exists(SAVED_RESULTS_DIR):
        return []
    
    results = []
    for item in os.listdir(SAVED_RESULTS_DIR):
        result_path = os.path.join(SAVED_RESULTS_DIR, item)
        if os.path.isdir(result_path):
            params_file = os.path.join(result_path, SAVED_PARAMS_FILE)
            if os.path.exists(params_file):
                try:
                    with open(params_file, 'r', encoding='utf-8') as f:
                        params = json.load(f)
                    results.append({
                        'name': item,
                        'path': result_path,
                        'params': params,
                        'timestamp': params.get('timestamp', 'Unknown')
                    })
                except:
                    continue
    
    return sorted(results, key=lambda x: x['name'], reverse=True)

def load_saved_result(result_path):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    import shutil
    
    # –ó–∞–≥—Ä—É–∑–∏—Ç—å CSV —Ñ–∞–π–ª—ã
    saved_daily = os.path.join(result_path, DAILY_CSV)
    saved_monthly = os.path.join(result_path, MONTHLY_CSV)
    saved_tiers = os.path.join(result_path, MONTHLY_TIERS_ZNX_CSV)
    
    if os.path.exists(saved_daily):
        shutil.copy2(saved_daily, DAILY_CSV)
    if os.path.exists(saved_monthly):
        shutil.copy2(saved_monthly, MONTHLY_CSV)
    if os.path.exists(saved_tiers):
        shutil.copy2(saved_tiers, MONTHLY_TIERS_ZNX_CSV)

def create_export_zip():
    """Create a ZIP file with all current data for export"""
    zip_buffer = io.BytesIO()
    
    with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
        # Add CSV files if they exist
        for csv_file in [DAILY_CSV, MONTHLY_CSV, MONTHLY_TIERS_ZNX_CSV]:
            if os.path.exists(csv_file):
                zip_file.write(csv_file, csv_file)
        
        # Add parameters file if it exists in current directory
        if os.path.exists("current_params.json"):
            zip_file.write("current_params.json", "generation_params.json")
    
    zip_buffer.seek(0)
    return zip_buffer.getvalue()

st.set_page_config(page_title="RevShare Pool Dashboard", layout="wide")

# Sidebar for data generation
st.sidebar.title("üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
st.sidebar.info("‚ÑπÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∏–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –î–∞—à–±–æ—Ä–¥ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV —Ñ–∞–π–ª–æ–≤.")

# Load saved results section
st.sidebar.markdown("### üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
saved_results = get_saved_results()

if saved_results:
    result_names = [f"{result['name']} ({result['timestamp']})" for result in saved_results]
    selected_result = st.sidebar.selectbox(
        "üóÇÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç", 
        options=["–ù–µ –≤—ã–±—Ä–∞–Ω–æ"] + result_names,
        help="–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏"
    )
    
    if selected_result != "–ù–µ –≤—ã–±—Ä–∞–Ω–æ":
        selected_index = result_names.index(selected_result)
        selected_result_data = saved_results[selected_index]
        
        col1, col2 = st.sidebar.columns(2)
        with col1:
            if st.button("üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å", help="–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"):
                try:
                    load_saved_result(selected_result_data['path'])
                    load_data.clear()  # Clear cache to reload data
                    st.sidebar.success(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç '{selected_result_data['name']}' –∑–∞–≥—Ä—É–∂–µ–Ω!")
                    st.rerun()
                except Exception as e:
                    st.sidebar.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
        
        with col2:
            if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", help="–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"):
                try:
                    import shutil
                    shutil.rmtree(selected_result_data['path'])
                    st.sidebar.success(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç '{selected_result_data['name']}' —É–¥–∞–ª–µ–Ω!")
                    st.rerun()
                except Exception as e:
                    st.sidebar.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}")
        
        # Show result info
        if os.path.exists(os.path.join(selected_result_data['path'], SAVED_PARAMS_FILE)):
            with open(os.path.join(selected_result_data['path'], SAVED_PARAMS_FILE), 'r', encoding='utf-8') as f:
                params = json.load(f)
            
            st.sidebar.markdown("**üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:**")
            st.sidebar.markdown(f"‚Ä¢ ZNX: {params.get('znx_amount', 'N/A'):,.0f}")
            st.sidebar.markdown(f"‚Ä¢ –ö—É—Ä—Å: ${params.get('znx_rate', 'N/A'):.8f}")
            st.sidebar.markdown(f"‚Ä¢ –ü—É–ª: ${params.get('pool_size', 'N/A'):,.2f}")
            if 'stable_znx_amount' in params and 'growth_znx_amount' in params:
                st.sidebar.markdown(f"‚Ä¢ Stable: {params.get('stable_znx_amount', 'N/A'):,.0f} ZNX")
                st.sidebar.markdown(f"‚Ä¢ Growth: {params.get('growth_znx_amount', 'N/A'):,.0f} ZNX")
            else:
                st.sidebar.markdown(f"‚Ä¢ Stable: {params.get('stable_ratio', 'N/A'):.1%}")
            st.sidebar.markdown(f"‚Ä¢ GGR: {params.get('target_ggr', 'N/A'):.1f}x")
else:
    st.sidebar.info("üì≠ –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

st.sidebar.markdown("---")
st.sidebar.markdown("### –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—É–ª–∞")

# Simplified pool parameters - only 3 fields
stable_znx_amount = st.sidebar.number_input("üîµ –¢–æ–∫–µ–Ω—ã –≤ Stable –ø—É–ª–µ", min_value=0.0, max_value=10000000.0, value=30000.0, step=1000.0, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ZNX —Ç–æ–∫–µ–Ω–æ–≤ –≤ Stable –ø—É–ª–µ")
growth_znx_amount = st.sidebar.number_input("üü¢ –¢–æ–∫–µ–Ω—ã –≤ Growth –ø—É–ª–µ", min_value=0.0, max_value=10000000.0, value=20000.0, step=1000.0, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ZNX —Ç–æ–∫–µ–Ω–æ–≤ –≤ Growth –ø—É–ª–µ")
znx_rate = st.sidebar.number_input("üí± –ö—É—Ä—Å ZNX", min_value=0.00000001, max_value=100.0, value=1.0, step=0.00000001, format="%.8f", help="–ö—É—Ä—Å ZNX –∫ –¥–æ–ª–ª–∞—Ä—É")

# Calculate derived values for backward compatibility
znx_amount = stable_znx_amount + growth_znx_amount
pool_size = znx_amount * znx_rate
stable_ratio = stable_znx_amount / znx_amount if znx_amount > 0 else 0.0
growth_ratio = growth_znx_amount / znx_amount if znx_amount > 0 else 0.0

# Display summary
st.sidebar.markdown("---")
st.sidebar.markdown("**üìä –ò—Ç–æ–≥–æ:**")
st.sidebar.markdown(f"‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {znx_amount:,.0f} ZNX")
st.sidebar.markdown(f"‚Ä¢ –†–∞–∑–º–µ—Ä –ø—É–ª–∞: ${pool_size:,.2f}")
st.sidebar.markdown("---")

# Date and target parameters
start_date = st.sidebar.date_input("üìÖ –î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞", value=date(2025, 11, 1), help="–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
target_ggr = st.sidebar.slider("üéØ –¶–µ–ª–µ–≤–æ–π GGR –º–Ω–æ–∂–∏—Ç–µ–ª—å", min_value=2.0, max_value=5.0, value=3.2, step=0.1, help="–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
ggr_volatility = st.sidebar.slider("üìä –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å GGR", min_value=0.05, max_value=0.30, value=0.15, step=0.01, help="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∫–æ–ª–µ–±–∞–Ω–∏–π GGR. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

# Referral parameters
st.sidebar.markdown("### ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")
referral_ratio = st.sidebar.slider("üë• –î–æ–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –¥–µ–Ω–µ–≥ –≤ –ø—É–ª–µ (%)", min_value=0.0, max_value=50.0, value=15.0, step=5.0, help="–ü—Ä–æ—Ü–µ–Ω—Ç –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤, –ø—Ä–∏—à–µ–¥—à–∏—Ö –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º —Å—Å—ã–ª–∫–∞–º")

# Simplified bonus parameters
st.sidebar.markdown("#### üéÅ –ë–æ–Ω—É—Å—ã")
upfront_bonus_stable = st.sidebar.slider("üí∞ –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å (%)", min_value=1.0, max_value=5.0, value=3.0, step=0.5, help="–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏")
ongoing_share_stable = st.sidebar.slider("üìà –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –±–æ–Ω—É—Å Stable (%)", min_value=2.0, max_value=6.0, value=4.0, step=1.0, help="–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –±–æ–Ω—É—Å –æ—Ç –º–µ—Å—è—á–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏ Stable –ø—É–ª–∞")
ongoing_share_growth = st.sidebar.select_slider("üìà –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –±–æ–Ω—É—Å Growth (%)", options=[10, 12, 15, 18, 20], value=15, help="–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –±–æ–Ω—É—Å –æ—Ç –º–µ—Å—è—á–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏ Growth –ø—É–ª–∞")

# Set growth upfront bonus same as stable for compatibility
upfront_bonus_growth = upfront_bonus_stable


# Traffic parameters
st.sidebar.markdown("### –¢—Ä–∞—Ñ–∏–∫")
cpa_min = st.sidebar.number_input("üí∏ CPA –º–∏–Ω ($)", min_value=10, max_value=500, value=50, step=5, help="–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤)")
cpa_max = st.sidebar.number_input("üí∏ CPA –º–∞–∫—Å ($)", min_value=cpa_min, max_value=1000, value=150, step=5, help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤)")

# Calculate effective CPA ranges including referral costs
if referral_ratio > 0:
    # Referral costs reduce available traffic budget
    referral_cost_factor = 1 + (referral_ratio / 100) * 0.1  # 10% additional cost per referral
    effective_cpa_min = cpa_min * referral_cost_factor
    effective_cpa_max = cpa_max * referral_cost_factor
    
    st.sidebar.markdown(f"**–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π CPA —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∫–æ–π:**")
    st.sidebar.markdown(f"‚Ä¢ –ú–∏–Ω: ${effective_cpa_min:.1f} (+{((referral_cost_factor-1)*100):.1f}%)")
    st.sidebar.markdown(f"‚Ä¢ –ú–∞–∫—Å: ${effective_cpa_max:.1f} (+{((referral_cost_factor-1)*100):.1f}%)")
else:
    effective_cpa_min = cpa_min
    effective_cpa_max = cpa_max

# Data loading function (defined before generation logic)
@st.cache_data(show_spinner=False)
def load_data():
    daily = pd.read_csv(DAILY_CSV, parse_dates=["date"]) if os.path.exists(DAILY_CSV) else None
    monthly = pd.read_csv(MONTHLY_CSV) if os.path.exists(MONTHLY_CSV) else None
    tiers = pd.read_csv(MONTHLY_TIERS_ZNX_CSV) if os.path.exists(MONTHLY_TIERS_ZNX_CSV) else None
    return daily, monthly, tiers

generate_button = st.sidebar.button("üöÄ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", type="primary")

# Generate data if button is clicked
if generate_button:
    with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ..."):
        from revshare_pool import RevSharePoolGenerator
        import os
        import random
        import time
        
        # Generate random seed based on current time and parameters
        seed = int(time.time() * 1000) % 1000000 + hash(str(znx_amount) + str(znx_rate) + str(stable_ratio) + str(target_ggr)) % 1000
        random.seed(seed)
        np.random.seed(seed)
        
        # Create generator with custom parameters
        generator = RevSharePoolGenerator(
            pool_size=pool_size,
            stable_ratio=stable_ratio,
            growth_ratio=growth_ratio,
            cpa_range=(effective_cpa_min, effective_cpa_max),
            target_ggr_multiplier=target_ggr,
            ggr_volatility=ggr_volatility,
            referral_ratio=referral_ratio / 100.0,  # Convert percentage to decimal
            upfront_bonus_stable=upfront_bonus_stable / 100.0,
            upfront_bonus_growth=upfront_bonus_growth / 100.0,
            ongoing_share_stable=ongoing_share_stable / 100.0,
            ongoing_share_growth=ongoing_share_growth / 100.0,
            znx_price=znx_rate,
            znx_amount=znx_amount,
            znx_rate=znx_rate,
            stable_znx_amount=stable_znx_amount,
            growth_znx_amount=growth_znx_amount,
            start_date=start_date.strftime("%Y-%m-%d")
        )
        
        # Calibrate to target GGR multiplier
        generator.calibrate_to_target_ggr(tolerance=0.1)
        
        # Generate data
        daily_data = generator.generate_daily_data()
        monthly_data = generator.get_monthly_summary(daily_data)
        monthly_tiers_data = generator.get_monthly_tier_payouts_per_znx(daily_data)
        
        # Save to CSV files
        daily_data.to_csv(DAILY_CSV, index=False)
        monthly_data.to_csv(MONTHLY_CSV, index=False)
        monthly_tiers_data.to_csv(MONTHLY_TIERS_ZNX_CSV, index=False)
        
        # Clear cache to force data reload
        load_data.clear()
        
        st.sidebar.success("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        
        # Add save functionality
        st.sidebar.markdown("---")
        st.sidebar.markdown("### üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        save_name = st.sidebar.text_input("üìù –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", value=f"–†–µ–∑—É–ª—å—Ç–∞—Ç_{datetime.now().strftime('%Y%m%d_%H%M')}", help="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
        
        if st.sidebar.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", help="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ CSV —Ñ–∞–π–ª—ã"):
            if save_name.strip():
                # Prepare parameters for saving
                generation_params = {
                    'znx_amount': znx_amount,
                    'znx_rate': znx_rate,
                    'pool_size': pool_size,
                    'stable_znx_amount': stable_znx_amount,
                    'growth_znx_amount': growth_znx_amount,
                    'stable_ratio': stable_ratio,
                    'growth_ratio': growth_ratio,
                    'start_date': start_date.strftime("%Y-%m-%d"),
                    'target_ggr': target_ggr,
                    'ggr_volatility': ggr_volatility,
                    'referral_ratio': referral_ratio,
                    'upfront_bonus_stable': upfront_bonus_stable,
                    'upfront_bonus_growth': upfront_bonus_growth,
                    'ongoing_share_stable': ongoing_share_stable,
                    'ongoing_share_growth': ongoing_share_growth,
                    'cpa_min': cpa_min,
                    'cpa_max': cpa_max,
                    'effective_cpa_min': effective_cpa_min,
                    'effective_cpa_max': effective_cpa_max,
                    'seed': seed,
                    'generation_timestamp': datetime.now().isoformat()
                }
                
                try:
                    save_generation_result(generation_params, save_name.strip())
                    st.sidebar.success(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç '{save_name.strip()}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
                except Exception as e:
                    st.sidebar.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")
            else:
                st.sidebar.error("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        
        st.rerun()

# Custom CSS for better styling
st.markdown("""
<style>
    /* –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ - –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è */
    .main .block-container {
        padding-top: 1rem;
        padding-bottom: 1rem;
    }
    
    /* –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –º–µ—Ç—Ä–∏–∫ - –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ */
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1rem;
        border-radius: 12px;
        color: white;
        text-align: center;
        margin: 0.3rem 0;
        box-shadow: 0 3px 12px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s ease;
    }
    
    .metric-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 18px rgba(0, 0, 0, 0.15);
    }
    
    .success-metric {
        background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);
    }
    
    .warning-metric {
        background: linear-gradient(135deg, #ff9800 0%, #f57c00 100%);
    }
    
    .info-metric {
        background: linear-gradient(135deg, #2196F3 0%, #1976D2 100%);
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è –º–µ—Ç—Ä–∏–∫ Streamlit - –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ */
    .stMetric {
        background: rgba(255, 255, 255, 0.05);
        padding: 0.8rem;
        border-radius: 10px;
        border: 1px solid rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        transition: all 0.3s ease;
        margin-bottom: 0.5rem;
    }
    
    .stMetric:hover {
        background: rgba(255, 255, 255, 0.08);
        border-color: rgba(255, 255, 255, 0.2);
        transform: translateY(-1px);
    }

    /* –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ - –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ */
    h1, h2, h3 {
        color: #1f2937;
        font-weight: 600;
        margin-bottom: 0.5rem;
        margin-top: 0.5rem;
    }

    h1 {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        font-size: 2.2rem;
        text-align: center;
        margin-bottom: 1rem;
    }

    h2 {
        border-left: 4px solid #667eea;
        padding-left: 1rem;
        margin-top: 1rem;
        margin-bottom: 0.8rem;
    }
    
    h3 {
        margin-top: 0.8rem;
        margin-bottom: 0.5rem;
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ */
    .stButton > button {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 0.5rem 1.5rem;
        font-weight: 500;
        transition: all 0.3s ease;
        box-shadow: 0 2px 10px rgba(102, 126, 234, 0.3);
    }
    
    .stButton > button:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π - –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ */
    hr {
        border: none;
        height: 1px;
        background: linear-gradient(90deg, transparent, #667eea, transparent);
        margin: 1rem 0;
    }

    /* –°—Ç–∏–ª–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü - –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ */
    .dataframe {
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        margin-bottom: 1rem;
    }

    /* –°—Ç–∏–ª–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ - –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ */
    .export-section {
        background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
        padding: 1rem;
        border-radius: 12px;
        border: 1px solid #e2e8f0;
        margin-bottom: 1rem;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    }
    
    /* –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è —Å–µ–∫—Ü–∏–π */
    .stMarkdown {
        margin-bottom: 0.5rem;
    }
    
    /* –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫ */
    .stColumn {
        padding: 0.2rem;
    }
    
    /* –ê–Ω–∏–º–∞—Ü–∏–∏ */
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    .stMetric, .metric-card {
        animation: fadeIn 0.5s ease-out;
    }
</style>
""", unsafe_allow_html=True)

# Load data using the function defined earlier
daily_df, monthly_df, tiers_df = load_data()

if daily_df is None or monthly_df is None:
    st.warning("CSV —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ run.py –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
    st.stop()

# Calculate key metrics from data (consolidated calculations)
final_ggr = float(daily_df["cumulative_ggr"].iloc[-1])
ggr_multiplier = float(daily_df["ggr_multiplier"].iloc[-1])
real_pool_size = final_ggr / ggr_multiplier if ggr_multiplier > 0 else DEFAULT_POOL_SIZE
real_stable_ratio = stable_ratio  # Use calculated ratio from user input
real_growth_ratio = growth_ratio  # Use calculated ratio from user input

# Main Dashboard Header
st.title("üéØ RevShare Pool Dashboard")
st.markdown(f"""
<div style="text-align: center; background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%); 
     padding: 0.8rem; border-radius: 10px; margin-bottom: 1.5rem; border: 1px solid #e2e8f0;">
    <h3 style="margin: 0; color: #1f2937;">
        üìä –ü—É–ª: <span style="color: #667eea;">${real_pool_size:,.0f}</span> | 
        üéØ GGR: <span style="color: #667eea;">{ggr_multiplier:.1f}x</span> | 
        üîµ Stable: <span style="color: #2196F3;">{real_stable_ratio:.0%}</span> | 
        üü¢ Growth: <span style="color: #4CAF50;">{real_growth_ratio:.0%}</span>
    </h3>
</div>
""", unsafe_allow_html=True)

# Action buttons at the top
col_action1, col_action2, col_action3 = st.columns([2, 2, 1])

with col_action1:
    if st.button("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", help="–°–∫–∞—á–∞—Ç—å –≤—Å–µ CSV —Ñ–∞–π–ª—ã –≤ ZIP –∞—Ä—Ö–∏–≤–µ", type="secondary"):
        try:
            zip_data = create_export_zip()
            st.download_button(
                label="üíæ –°–∫–∞—á–∞—Ç—å ZIP",
                data=zip_data,
                file_name=f"zenex_data_export_{datetime.now().strftime('%Y%m%d_%H%M')}.zip",
                mime="application/zip",
                help="–°–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤ —Å CSV —Ñ–∞–π–ª–∞–º–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"
            )
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")

with col_action2:
    if "show_save_favorite" not in st.session_state:
        st.session_state.show_save_favorite = False
    
    if st.button("‚≠ê –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", help="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", type="secondary"):
        st.session_state.show_save_favorite = True
    
    if st.session_state.show_save_favorite:
        favorite_name = st.text_input("üìù –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", 
                                     value=f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è_{datetime.now().strftime('%Y%m%d_%H%M')}", 
                                     key="favorite_name_input")
        
        col_save1, col_save2 = st.columns(2)
        with col_save1:
            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", key="save_favorite_btn"):
                if favorite_name.strip():
                    try:
                        current_params = {
                            'znx_amount': stable_znx_amount + growth_znx_amount,
                            'znx_rate': znx_rate,
                            'pool_size': (stable_znx_amount + growth_znx_amount) * znx_rate,
                            'stable_znx_amount': stable_znx_amount,
                            'growth_znx_amount': growth_znx_amount,
                            'stable_ratio': stable_znx_amount / (stable_znx_amount + growth_znx_amount) if (stable_znx_amount + growth_znx_amount) > 0 else 0.0,
                            'growth_ratio': growth_znx_amount / (stable_znx_amount + growth_znx_amount) if (stable_znx_amount + growth_znx_amount) > 0 else 0.0,
                            'start_date': start_date.strftime("%Y-%m-%d"),
                            'target_ggr': target_ggr,
                            'ggr_volatility': ggr_volatility,
                            'referral_ratio': referral_ratio,
                            'upfront_bonus_stable': upfront_bonus_stable,
                            'upfront_bonus_growth': upfront_bonus_stable,
                            'ongoing_share_stable': ongoing_share_stable,
                            'ongoing_share_growth': ongoing_share_growth,
                            'cpa_min': cpa_min,
                            'cpa_max': cpa_max,
                            'generation_timestamp': datetime.now().isoformat(),
                            'is_favorite': True
                        }
                        
                        save_generation_result(current_params, favorite_name.strip())
                        st.success(f"‚≠ê –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è '{favorite_name.strip()}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
                        st.session_state.show_save_favorite = False
                        st.rerun()
                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")
                else:
                    st.error("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        with col_save2:
            if st.button("‚ùå –û—Ç–º–µ–Ω–∞", key="cancel_favorite_btn"):
                st.session_state.show_save_favorite = False
                st.rerun()

# Removed duplicate calculations and title - using consolidated values from above

def display_tier_returns(ggr_multiplier):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –ø–æ —Ç–∏—Ä–∞–º"""
    st.subheader("üí∞ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –Ω–∞ $1 –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏")
    
    cols = st.columns(2)
    
    with cols[0]:
        st.markdown("**üîµ Stable Pool** (—Ç–æ–ª—å–∫–æ cash)")
        for tier, rate in [('Basic', 0.34), ('Advanced', 0.3825), ('Premium', 0.425)]:
            per_dollar = ggr_multiplier * rate
            profit_pct = (per_dollar - 1) * 100
            
            color = "üü¢" if per_dollar >= 1.0 else "üî¥"
            st.metric(
                f"{color} {tier} ({rate*100:.2f}%)",
                f"${per_dollar:.3f}",
                f"{profit_pct:+.1f}%"
            )
    
    with cols[1]:
        st.markdown("**üü¢ Growth Pool** (cash + 100% —Ç–æ–∫–µ–Ω–æ–≤)")
        for tier, rate in [('Basic', 0.085), ('Advanced', 0.10625), ('Premium', 0.1275)]:
            cash_per_dollar = ggr_multiplier * rate
            total_per_dollar = cash_per_dollar + 1.0
            
            st.metric(
                f"üü¢ {tier} ({rate*100:.2f}%)",
                f"${total_per_dollar:.3f}",
                f"${cash_per_dollar:.3f} cash"
            )

# –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–µ–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —É–¥–∞–ª–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–∏–∂–µ

# Consolidated metrics section
st.subheader("üìä –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∏ –∞–Ω–∞–ª–∏–∑")

# Calculate all metrics once
total_collected = real_pool_size
total_stable_payout = float(monthly_df["stable_payout"].sum())
total_growth_payout = float(monthly_df["growth_payout"].sum())
total_cash_paid = total_stable_payout + total_growth_payout
final_ggr = float(daily_df["cumulative_ggr"].iloc[-1])
ggr_multiplier = final_ggr / total_collected if total_collected > 0 else 0
total_referral_cost = float(monthly_df["monthly_referral_cost"].sum()) if "monthly_referral_cost" in monthly_df.columns else 0
total_payments = total_cash_paid + total_referral_cost
cost_of_capital = (total_payments / total_collected) * 100 if total_collected > 0 else 0
spent = float(daily_df["cumulative_traffic"].iloc[-1])
ftds = int(daily_df["new_ftds"].sum())
avg_cpa = spent / max(1, ftds)

# Main metrics in compact layout
col1, col2, col3, col4, col5 = st.columns(5)
with col1:
    st.metric("üí∞ –°–æ–±—Ä–∞–Ω–æ", f"${total_collected:,.0f}", help="–û–±—â–∞—è —Å—É–º–º–∞ —Å—Ä–µ–¥—Å—Ç–≤, —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –≤ –ø—É–ª–µ")
with col2:
    color_indicator = "üü¢" if ggr_multiplier >= 3.0 else "üü°" if ggr_multiplier >= 2.5 else "üî¥"
    st.metric(f"{color_indicator} GGR", f"{ggr_multiplier:.2f}x", help="–û—Ç–Ω–æ—à–µ–Ω–∏–µ –≤–∞–ª–æ–≤–æ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –¥–æ—Ö–æ–¥–∞ –∫ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–º —Å—Ä–µ–¥—Å—Ç–≤–∞–º")
with col3:
    st.metric("üìà –ü–æ—Ç—Ä–∞—á–µ–Ω–æ", f"${spent:,.0f}", delta=f"{(spent/real_pool_size)*100:.1f}%", help="–û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ç—Ä–∞—Ñ–∏–∫")
with col4:
    st.metric("üë• FTD", f"{ftds}", delta=f"CPA: ${avg_cpa:.0f}", help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–≤—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è")
with col5:
    cost_color = "üü¢" if cost_of_capital <= 50 else "üü°" if cost_of_capital <= 75 else "üî¥"
    st.metric(f"{cost_color} –ö–∞–ø–∏—Ç–∞–ª", f"{cost_of_capital:.1f}%", help="–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞–ø–∏—Ç–∞–ª–∞ (–≤—Å–µ –≤—ã–ø–ª–∞—Ç—ã/—Å–±–æ—Ä)")

# Financial breakdown in second row
col6, col7, col8, col9, col10 = st.columns(5)
with col6:
    st.metric("üí∏ Cash –≤—ã–ø–ª–∞—Ç—ã", f"${total_cash_paid:,.0f}", help="–î–µ–Ω–µ–∂–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞–º")
with col7:
    st.metric("ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ", f"${total_referral_cost:,.0f}", help="–†–∞—Å—Ö–æ–¥—ã –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É")
with col8:
    investment_ratio = (total_cash_paid / total_collected) * 100 if total_collected > 0 else 0
    st.metric("üìä –ò–Ω–≤–µ—Å—Ç. %", f"{investment_ratio:.1f}%", help="–ü—Ä–æ—Ü–µ–Ω—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –≤—ã–ø–ª–∞—Ç")
with col9:
    referral_ratio = (total_referral_cost / total_collected) * 100 if total_collected > 0 else 0
    st.metric("üéÅ –†–µ—Ñ–µ—Ä. %", f"{referral_ratio:.1f}%", help="–ü—Ä–æ—Ü–µ–Ω—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤")
with col10:
    # Use the correct column name from the new referral system implementation
    if "monthly_referral_cost" in monthly_df.columns:
        referral_total = float(monthly_df["monthly_referral_cost"].sum())
    elif "referral_paid_usd" in monthly_df.columns:
        referral_total = float(monthly_df["referral_paid_usd"].sum())
    else:
        referral_total = 0.0
    st.metric("ü§ù Referral", f"${referral_total:,.0f}", delta="Payouts", help="–û–±—â–∏–µ –≤—ã–ø–ª–∞—Ç—ã –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ. –í–∫–ª—é—á–∞–µ—Ç –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º")
with col6:
    # –ü—É—Å—Ç–∞—è –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
    st.write("")

# Display tier returns
display_tier_returns(ggr_multiplier)

# Combined breakeven metrics and export section
st.subheader("‚öñÔ∏è –ú–µ—Ç—Ä–∏–∫–∏ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ —ç–∫—Å–ø–æ—Ä—Ç")

# Breakeven metrics in first row
col1, col2, col3 = st.columns(3)

# Calculate GGR multiplier and breakeven metrics
min_ggr_multiplier_for_basic = 1 / 0.34  # = 2.94x for Stable Basic breakeven
is_breakeven = ggr_multiplier >= min_ggr_multiplier_for_basic

with col1:
    color = "üü¢" if is_breakeven else "üî¥"
    st.metric(f"{color} Min GGR for Stable Basic Breakeven", f"{min_ggr_multiplier_for_basic:.2f}x", 
              delta=f"–¢–µ–∫—É—â–∏–π: {ggr_multiplier:.2f}x", 
              help="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π GGR –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏ Stable Basic —Ç–∏—Ä–∞ (34% —Å—Ç–∞–≤–∫–∞). –ü—Ä–∏ 2.94x GGR –∏–Ω–≤–µ—Å—Ç–æ—Ä—ã –ø–æ–ª—É—á–∞—é—Ç 100% –≤–æ–∑–≤—Ä–∞—Ç –∫–∞–ø–∏—Ç–∞–ª–∞.")
with col2:
    color = "üü¢" if final_ggr >= real_pool_size * 2.5 else "üî¥"
    st.metric(f"{color} Total GGR", f"${final_ggr:,.0f}", 
              delta=f"{ggr_multiplier:.2f}x –º–Ω–æ–∂–∏—Ç–µ–ª—å",
              help="–û–±—â–∏–π –≤–∞–ª–æ–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –¥–æ—Ö–æ–¥ (GGR) –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥. –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç –æ–∑–Ω–∞—á–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è 2.5x –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø—É–ª–∞.")
with col3:
    status = "‚úÖ –ë–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç—å" if is_breakeven else "‚ùå –£–±—ã—Ç–æ–∫"
    st.metric("üìä –°—Ç–∞—Ç—É—Å", status, delta=None,
              help="–°—Ç–∞—Ç—É—Å –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—É–ª–∞. –ó–µ–ª–µ–Ω—ã–π - –ø—É–ª –ø—Ä–∏–±—ã–ª—å–Ω—ã–π, –∫—Ä–∞—Å–Ω—ã–π - —É–±—ã—Ç–æ—á–Ω—ã–π. –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º GGR –¥–ª—è Stable Basic.")

# Export and favorites section in second row
st.markdown("##### üì§ –≠–∫—Å–ø–æ—Ä—Ç –∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
col1, col2 = st.columns(2)

with col1:
    if st.button("üì¶ –°–∫–∞—á–∞—Ç—å ZIP –∞—Ä—Ö–∏–≤", help="–°–∫–∞—á–∞—Ç—å –≤—Å–µ CSV —Ñ–∞–π–ª—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ ZIP –∞—Ä—Ö–∏–≤–µ", use_container_width=True):
        with st.spinner("üì¶ –°–æ–∑–¥–∞—é ZIP –∞—Ä—Ö–∏–≤..."):
            zip_buffer = create_export_zip()
            if zip_buffer:
                st.download_button(
                    label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤",
                    data=zip_buffer,
                    file_name=f"revshare_data_{datetime.now().strftime('%Y%m%d_%H%M%S')}.zip",
                    mime="application/zip",
                    use_container_width=True
                )

with col2:
    save_name = st.text_input("üíæ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", 
                             value=f"–ö–æ–Ω—Ñ–∏–≥_{datetime.now().strftime('%Y%m%d_%H%M')}", 
                             help="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    
    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", help="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–∫ –∏–∑–±—Ä–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", use_container_width=True):
        if save_name.strip():
            with st.spinner("üíæ –°–æ—Ö—Ä–∞–Ω—è—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é..."):
                try:
                    # Consolidated values are used here
                    generation_params = {
                        'znx_amount': znx_amount,
                        'znx_rate': znx_rate,
                        'pool_size': pool_size,
                        'stable_znx_amount': stable_znx_amount,
                        'growth_znx_amount': growth_znx_amount,
                        'stable_ratio': stable_ratio,
                        'growth_ratio': growth_ratio,
                        'generation_timestamp': datetime.now().isoformat()
                    }
                    save_generation_result(generation_params, save_name.strip())
                    st.success(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è '{save_name.strip()}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")
        else:
            st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

# GGR chart and total
left, right = st.columns([2, 1])
with left:
    st.subheader("üìà –î–∏–Ω–∞–º–∏–∫–∞ GGR")
    # Create a more sophisticated chart with gradient
    ggr_chart = alt.Chart(daily_df).mark_area(
        line={'color': '#1f77b4'},
        color=alt.Gradient(
            gradient='linear',
            stops=[alt.GradientStop(color='#e1f5fe', offset=0),
                   alt.GradientStop(color='#1f77b4', offset=1)],
            x1=1, x2=1, y1=1, y2=0
        )
    ).encode(
        x=alt.X("date:T", axis=alt.Axis(title="–î–∞—Ç–∞", labelAngle=-45)),
        y=alt.Y("cumulative_ggr:Q", axis=alt.Axis(title="–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π GGR (USD)"))
    ).properties(height=300)
    st.altair_chart(ggr_chart, use_container_width=True)

with right:
    st.subheader("üíé Total GGR")
    total_ggr = float(daily_df["cumulative_ggr"].iloc[-1])
    multiplier = total_ggr / pool_size
    st.metric("üí∞ GGR", f"${total_ggr:,.0f}", delta=f"{multiplier:.2f}x –º–Ω–æ–∂–∏—Ç–µ–ª—å")
    
    # ROI indicator
    if multiplier >= 3.0:
        st.success(f"üéØ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞! {multiplier:.2f}x")
    elif multiplier >= 2.0:
        st.warning(f"‚ö†Ô∏è –ë–ª–∏–∑–∫–æ –∫ —Ü–µ–ª–∏: {multiplier:.2f}x")
    else:
        st.error(f"‚ùå –ù–∏–∂–µ —Ü–µ–ª–∏: {multiplier:.2f}x")



st.divider()

# Monthly payouts per pool (bar chart)
st.subheader("üìä –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã –ø–æ –ø—É–ª–∞–º")
monthly_df_display = monthly_df.copy()
# Add one month offset for payout dates (payouts happen at the end of the month, so display next month)
monthly_df_display["date"] = pd.to_datetime(monthly_df_display[["year", "month"]].assign(day=1)) + pd.DateOffset(months=1)
payouts_melt = monthly_df_display[["date", "stable_payout", "growth_payout"]].melt("date", var_name="pool", value_name="payout")
payouts_melt["payout"] = payouts_melt["payout"].clip(lower=0)

# Rename pools for better display
payouts_melt["pool"] = payouts_melt["pool"].map({
    "stable_payout": "üîµ Stable",
    "growth_payout": "üü¢ Growth"
})

monthly_chart = alt.Chart(payouts_melt).mark_bar().encode(
    x=alt.X("pool:N", axis=alt.Axis(title="–ü—É–ª")),
    y=alt.Y("payout:Q", axis=alt.Axis(title="–í—ã–ø–ª–∞—Ç–∞ (USD)")),
    color=alt.Color("pool:N", 
                   scale=alt.Scale(range=["#2196F3", "#4CAF50"]),
                   legend=alt.Legend(title="–ü—É–ª")),
    column=alt.Column("date:T", header=alt.Header(labelAngle=-45, title="–ú–µ—Å—è—Ü"))
).properties(
    width=120,
    height=200
).resolve_scale(
    x='independent'
)
st.altair_chart(monthly_chart, use_container_width=False)

st.divider()

# Daily table with key metrics
st.subheader("üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
daily_cols = [
    "date",
    "new_ftds",
    "active_players", 
    "total_deposits",
    "daily_ggr",
    "ggr_multiplier",
    "traffic_spend",
    "cumulative_ggr",
]

# Format the dataframe for better display
daily_display = daily_df[daily_cols].copy()
daily_display.columns = [
    "üìÖ –î–∞—Ç–∞",
    "üë• –ù–æ–≤—ã–µ FTD", 
    "üéÆ –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä–æ–∫–∏",
    "üí∞ –û–±—â–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã",
    "üìà –î–Ω–µ–≤–Ω–æ–π GGR",
    "üéØ GGR –º–Ω–æ–∂–∏—Ç–µ–ª—å",
    "üìä –¢—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—Ö–æ–¥—ã",
    "üìä –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π GGR"
]

st.dataframe(daily_display, use_container_width=True, hide_index=True)

st.divider()

# Monthly per-ZNX table
col1, col2 = st.columns([3, 1])
with col1:
    st.subheader("üí∞ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã –Ω–∞ 1 ZNX")
with col2:
    with st.expander("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞"):
        st.markdown("""
        **–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã:**
        - **cash_usd** - –¥–µ–Ω–µ–∂–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞ –≤ $ –∑–∞ 1 ZNX
        - **total_usd** - –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã–ø–ª–∞—Ç—ã –∑–∞ 1 ZNX
        - **Stable –ø—É–ª**: —Ç–æ–ª—å–∫–æ –¥–µ–Ω—å–≥–∏ (% –æ—Ç GGR)
        - **Growth –ø—É–ª**: —Ç–æ–ª—å–∫–æ cash (% –æ—Ç GGR)
        - **–¢–∏—Ä—ã**: Basic/Advanced/Premium
        - **–ú–∏–Ω–∏–º—É–º**: 295% GGR/Spent –¥–ª—è –±–µ–∑—É–±—ã—Ç–∫–∞
        """)

if tiers_df is None:
    st.info("–ó–∞–ø—É—Å—Ç–∏—Ç–µ run.py, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –≤—ã–ø–ª–∞—Ç –ø–æ ZNX: pool1_nov2025_monthly_tiers_znx.csv")
else:
    tiers_df_display = tiers_df.copy()
    # Add one month offset for payout dates (payouts happen at the end of the month, so display next month)
    tiers_df_display["date"] = pd.to_datetime(tiers_df_display[["year", "month"]].assign(day=1)) + pd.DateOffset(months=1)
    st.dataframe(
        tiers_df_display[["date", "pool", "tier", "per_znx_cash_usd", "per_znx_total_usd"]],
        use_container_width=True,
        hide_index=True,
    )

    # –î–∏–∞–≥—Ä–∞–º–º–∞ —É–¥–∞–ª–µ–Ω–∞ - —Ç–∞–±–ª–∏—Ü—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ

# Add summary table for return per dollar invested
st.divider()
st.subheader("üí∞ –ò—Ç–æ–≥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ –∫–∞–∂–¥—ã–π –≤–ª–æ–∂–µ–Ω–Ω—ã–π –¥–æ–ª–ª–∞—Ä")

# Use CORRECT values from CSV data that includes proper tier calculations
if daily_df is not None and monthly_df is not None and tiers_df is not None:
    # Get final values from CSV
    final_ggr = daily_df["cumulative_ggr"].iloc[-1]
    ggr_multiplier = final_ggr / real_pool_size
    
    # Pool allocations (capital shares)
    stable_basic_invested = real_pool_size * real_stable_ratio * 0.5
    stable_advanced_invested = real_pool_size * real_stable_ratio * 0.3
    stable_premium_invested = real_pool_size * real_stable_ratio * 0.2
    
    growth_basic_invested = real_pool_size * real_growth_ratio * 0.5
    growth_advanced_invested = real_pool_size * real_growth_ratio * 0.3
    growth_premium_invested = real_pool_size * real_growth_ratio * 0.2
    
    # NEW FORMULAS - Stable Pool (NO tokens returned)
    # Stable: payout = investment √ó GGR_multiplier √ó tier_rate
    stable_basic_received = stable_basic_invested * ggr_multiplier * 0.34
    stable_advanced_received = stable_advanced_invested * ggr_multiplier * 0.3825
    stable_premium_received = stable_premium_invested * ggr_multiplier * 0.425
    
    # NEW FORMULAS - Growth Pool (100% tokens RETURNED)
    # Growth: total = (investment √ó GGR_multiplier √ó tier_rate) + investment
    growth_basic_cash = growth_basic_invested * ggr_multiplier * 0.085
    growth_advanced_cash = growth_advanced_invested * ggr_multiplier * 0.10625
    growth_premium_cash = growth_premium_invested * ggr_multiplier * 0.1275
    
    growth_basic_total = growth_basic_cash + growth_basic_invested  # cash + tokens
    growth_advanced_total = growth_advanced_cash + growth_advanced_invested  # cash + tokens
    growth_premium_total = growth_premium_cash + growth_premium_invested  # cash + tokens
    
    # Per dollar calculations
    stable_basic_per_dollar = ggr_multiplier * 0.34
    stable_advanced_per_dollar = ggr_multiplier * 0.3825
    stable_premium_per_dollar = ggr_multiplier * 0.425
    
    growth_basic_per_dollar = (ggr_multiplier * 0.085) + 1.00
    growth_advanced_per_dollar = (ggr_multiplier * 0.10625) + 1.00
    growth_premium_per_dollar = (ggr_multiplier * 0.1275) + 1.00
    
    # Create summary table
    summary_data = {
        "–ü—É–ª": [
            "üîµ Stable Basic (34%)", "üîµ Stable Advanced (38.25%)", "üîµ Stable Premium (42.5%)",
            "üü¢ Growth Basic (8.5%)", "üü¢ Growth Advanced (10.625%)", "üü¢ Growth Premium (12.75%)"
        ],
        "–í–ª–æ–∂–µ–Ω–æ ($)": [
            f"${stable_basic_invested:,.0f}",
            f"${stable_advanced_invested:,.0f}",
            f"${stable_premium_invested:,.0f}",
            f"${growth_basic_invested:,.0f}",
            f"${growth_advanced_invested:,.0f}",
            f"${growth_premium_invested:,.0f}"
        ],
        "–ü–æ–ª—É—á–µ–Ω–æ ($)": [
            f"${stable_basic_received:,.0f}",
            f"${stable_advanced_received:,.0f}",
            f"${stable_premium_received:,.0f}",
            f"${growth_basic_total:,.0f}",
            f"${growth_advanced_total:,.0f}",
            f"${growth_premium_total:,.0f}"
        ],
        "–ù–∞ $1 –ø–æ–ª—É—á–∞–µ—à—å": [
            f"${stable_basic_per_dollar:.2f}",
            f"${stable_advanced_per_dollar:.2f}",
            f"${stable_premium_per_dollar:.2f}",
            f"${growth_basic_per_dollar:.2f}",
            f"${growth_advanced_per_dollar:.2f}",
            f"${growth_premium_per_dollar:.2f}"
        ]
    }
    
    summary_df = pd.DataFrame(summary_data)
    st.dataframe(summary_df, use_container_width=True, hide_index=True)
    
    # Add interactive explanation
    with st.expander("üßÆ –§–æ—Ä–º—É–ª—ã —Ä–∞—Å—á–µ—Ç–æ–≤"):
        col1, col2 = st.columns(2)
        with col1:
            st.markdown("""
            **üí∞ Stable –ø—É–ª:**
            - –§–æ—Ä–º—É–ª–∞: `investment √ó GGR √ó tier_rate`
            - Basic: 34% | Advanced: 38.25% | Premium: 42.5%
            - –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ $1: `GGR √ó tier_rate`
            """)
        with col2:
            st.markdown("""
            **üöÄ Growth –ø—É–ª:**
            - –§–æ—Ä–º—É–ª–∞: `(investment √ó GGR √ó tier_rate) + investment`
            - Basic: 8.5% | Advanced: 10.625% | Premium: 12.75%
            - –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ $1: `(GGR √ó tier_rate) + 1.00`
            """)
        st.markdown("**üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞:** Basic 30% | Advanced 40% | Premium 30%")
else:
    st.warning("–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Ç–æ–≥–æ–≤–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏")

st.caption("Built with Streamlit + Altair")