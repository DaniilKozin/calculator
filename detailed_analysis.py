#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import pandas as pd
import numpy as np

def analyze_pool_data():
    """
    –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø—É–ª–∞ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö
    """
    
    print("=== –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –ü–£–õ–ê ===\n")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    try:
        monthly_df = pd.read_csv('pool1_nov2025_monthly.csv')
        daily_df = pd.read_csv('pool1_nov2025_daily.csv')
        tiers_df = pd.read_csv('pool1_nov2025_monthly_tiers_znx.csv')
        print("‚úì –í—Å–µ CSV —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤: {e}")
        return
    
    print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:")
    print(f"   - –ú–µ—Å—è—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(monthly_df)} —Å—Ç—Ä–æ–∫")
    print(f"   - –î–Ω–µ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(daily_df)} —Å—Ç—Ä–æ–∫") 
    print(f"   - –î–∞–Ω–Ω—ã–µ –ø–æ —É—Ä–æ–≤–Ω—è–º: {len(tiers_df)} —Å—Ç—Ä–æ–∫\n")
    
    # === –ê–ù–ê–õ–ò–ó –ú–ï–°–Ø–ß–ù–´–• –î–ê–ù–ù–´–• ===
    print("=== –ê–ù–ê–õ–ò–ó –ú–ï–°–Ø–ß–ù–´–• –î–ê–ù–ù–´–• ===")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—É–º–º—ã –∏–∑ –º–µ—Å—è—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    total_stable_payout = monthly_df['stable_payout'].sum()
    total_growth_payout = monthly_df['growth_payout'].sum()
    total_cash_paid = total_stable_payout + total_growth_payout
    total_referral_cost = monthly_df['monthly_referral_cost'].sum()
    total_capital_cost = monthly_df['capital_cost_usd'].sum()
    final_ggr = monthly_df['cumulative_ggr'].iloc[-1]
    
    print(f"üí∞ –í—ã–ø–ª–∞—Ç—ã:")
    print(f"   - Stable –≤—ã–ø–ª–∞—Ç—ã: ${total_stable_payout:,.2f}")
    print(f"   - Growth –≤—ã–ø–ª–∞—Ç—ã: ${total_growth_payout:,.2f}")
    print(f"   - –û–±—â–∏–µ cash –≤—ã–ø–ª–∞—Ç—ã: ${total_cash_paid:,.2f}")
    print(f"   - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: ${total_referral_cost:,.2f}")
    print(f"   - –ö–∞–ø–∏—Ç–∞–ª—å–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã: ${total_capital_cost:,.2f}")
    print(f"   - –ò—Ç–æ–≥–æ–≤—ã–π GGR: ${final_ggr:,.2f}\n")
    
    # === –ê–ù–ê–õ–ò–ó –î–ù–ï–í–ù–´–• –î–ê–ù–ù–´–• ===
    print("=== –ê–ù–ê–õ–ò–ó –î–ù–ï–í–ù–´–• –î–ê–ù–ù–´–• ===")
    
    final_ggr_daily = daily_df['cumulative_ggr'].iloc[-1]
    final_multiplier = daily_df['ggr_multiplier'].iloc[-1]
    
    print(f"üìà –§–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
    print(f"   - –ò—Ç–æ–≥–æ–≤—ã–π GGR: ${final_ggr_daily:,.2f}")
    print(f"   - GGR –º–Ω–æ–∂–∏—Ç–µ–ª—å: {final_multiplier:.2f}x\n")
    
    # === –†–ê–°–ß–ï–¢–´ –î–ê–®–ë–û–†–î–ê ===
    print("=== –†–ê–°–ß–ï–¢–´ –ö–ê–ö –í –î–ê–®–ë–û–†–î–ï ===")
    
    # –†–∞—Å—á–µ—Ç real_pool_size –∫–∞–∫ –≤ –¥–∞—à–±–æ—Ä–¥–µ
    if final_multiplier > 0:
        dashboard_real_pool_size = final_ggr_daily / final_multiplier
    else:
        dashboard_real_pool_size = 50000  # DEFAULT_POOL_SIZE
    
    # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–∞–ø–∏—Ç–∞–ª–∞ –∫–∞–∫ –≤ –¥–∞—à–±–æ—Ä–¥–µ
    dashboard_cost_of_capital = (total_cash_paid / dashboard_real_pool_size) * 100
    
    print(f"üéØ –†–∞—Å—á–µ—Ç—ã –¥–∞—à–±–æ—Ä–¥–∞:")
    print(f"   - Real Pool Size: ${dashboard_real_pool_size:,.2f}")
    print(f"   - Cost of Capital: {dashboard_cost_of_capital:.1f}%")
    print(f"   - –§–æ—Ä–º—É–ª–∞: (${total_cash_paid:,.2f} / ${dashboard_real_pool_size:,.2f}) * 100\n")
    
    # === –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ï –†–ê–°–ß–ï–¢–´ ===
    print("=== –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ï –†–ê–°–ß–ï–¢–´ ===")
    
    # –†–∞—Å—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞–ø–∏—Ç–∞–ª—å–Ω—ã—Ö –∑–∞—Ç—Ä–∞—Ç
    capital_cost_of_capital = (total_cash_paid / total_capital_cost) * 100
    
    print(f"üí° –†–∞—Å—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞–ø–∏—Ç–∞–ª—å–Ω—ã—Ö –∑–∞—Ç—Ä–∞—Ç:")
    print(f"   - –°–æ–±—Ä–∞–Ω–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${total_capital_cost:,.2f}")
    print(f"   - Cost of Capital: {capital_cost_of_capital:.1f}%")
    print(f"   - –§–æ—Ä–º—É–ª–∞: (${total_cash_paid:,.2f} / ${total_capital_cost:,.2f}) * 100\n")
    
    # === –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –ü–û –£–†–û–í–ù–Ø–ú ===
    print("=== –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –ü–û –£–†–û–í–ù–Ø–ú ===")
    
    if not tiers_df.empty:
        print(f"üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —É—Ä–æ–≤–Ω—è–º:")
        print(f"   - –ö–æ–ª–æ–Ω–∫–∏: {list(tiers_df.columns)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–ø–ª–∞—Ç–∞—Ö –≤ tiers
        payout_columns = [col for col in tiers_df.columns if 'payout' in col.lower() or 'paid' in col.lower()]
        if payout_columns:
            print(f"   - –ö–æ–ª–æ–Ω–∫–∏ —Å –≤—ã–ø–ª–∞—Ç–∞–º–∏: {payout_columns}")
            
            for col in payout_columns:
                if col in tiers_df.columns:
                    total_tier_payout = tiers_df[col].sum()
                    print(f"   - –°—É–º–º–∞ {col}: ${total_tier_payout:,.2f}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫
        print(f"\nüìä –ü–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ —É—Ä–æ–≤–Ω—è–º:")
        print(tiers_df.head(3).to_string())
        print(f"\nüìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ —É—Ä–æ–≤–Ω—è–º:")
        print(tiers_df.tail(3).to_string())
    
    print("\n" + "="*60)
    
    # === –°–†–ê–í–ù–ï–ù–ò–ï –° –î–ê–®–ë–û–†–î–û–ú ===
    print("=== –°–†–ê–í–ù–ï–ù–ò–ï –° –î–ê–®–ë–û–†–î–û–ú ===")
    
    dashboard_values = {
        '–°–æ–±—Ä–∞–Ω–æ': 28390,
        'Cash –≤—ã–ø–ª–∞—Ç—ã': 22233,
        '–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞–ø–∏—Ç–∞–ª–∞': 78.3
    }
    
    print(f"üìä –ó–Ω–∞—á–µ–Ω–∏—è –∏–∑ –¥–∞—à–±–æ—Ä–¥–∞:")
    for key, value in dashboard_values.items():
        if key == '–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞–ø–∏—Ç–∞–ª–∞':
            print(f"   - {key}: {value}%")
        else:
            print(f"   - {key}: ${value:,}")
    
    print(f"\nüîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ:")
    print(f"   - –°–æ–±—Ä–∞–Ω–æ: –î–∞—à–±–æ—Ä–¥ ${dashboard_values['–°–æ–±—Ä–∞–Ω–æ']:,} vs –ö–∞–ø–∏—Ç–∞–ª—å–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã ${total_capital_cost:,.0f}")
    print(f"   - Cash –≤—ã–ø–ª–∞—Ç—ã: –î–∞—à–±–æ—Ä–¥ ${dashboard_values['Cash –≤—ã–ø–ª–∞—Ç—ã']:,} vs –†–∞—Å—á–µ—Ç ${total_cash_paid:,.0f}")
    print(f"   - –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞–ø–∏—Ç–∞–ª–∞: –î–∞—à–±–æ—Ä–¥ {dashboard_values['–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞–ø–∏—Ç–∞–ª–∞']}% vs –†–∞—Å—á–µ—Ç {capital_cost_of_capital:.1f}%")
    
    # === –ü–û–ò–°–ö –ò–°–¢–û–ß–ù–ò–ö–ê 32K ===
    print(f"\n=== –ü–û–ò–°–ö –ò–°–¢–û–ß–ù–ò–ö–ê 32K –í–´–ü–õ–ê–¢ ===")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—É–º–º—ã
    possible_totals = []
    
    # –°—É–º–º–∞ –≤—Å–µ—Ö –≤—ã–ø–ª–∞—Ç + —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ
    total_with_referral = total_cash_paid + total_referral_cost
    possible_totals.append(('Cash –≤—ã–ø–ª–∞—Ç—ã + –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ', total_with_referral))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥—Ä—É–≥–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –≤—ã–ø–ª–∞—Ç–∞–º–∏
    for col in monthly_df.columns:
        if 'payout' in col.lower() or 'cost' in col.lower() or 'paid' in col.lower():
            if col not in ['stable_payout', 'growth_payout', 'monthly_referral_cost', 'capital_cost_usd']:
                col_sum = monthly_df[col].sum()
                if col_sum > 0:
                    possible_totals.append((f'–°—É–º–º–∞ {col}', col_sum))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —É—Ä–æ–≤–Ω—è–º
    if not tiers_df.empty:
        for col in tiers_df.columns:
            if 'payout' in col.lower() or 'paid' in col.lower():
                col_sum = tiers_df[col].sum()
                if col_sum > 0:
                    possible_totals.append((f'Tiers {col}', col_sum))
    
    print(f"üîé –í–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ 32k:")
    for name, value in possible_totals:
        print(f"   - {name}: ${value:,.2f}")
        if 30000 <= value <= 35000:
            print(f"     ‚≠ê –í–û–ó–ú–û–ñ–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö 32K!")
    
    print(f"\n" + "="*60)
    print("–ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")

if __name__ == "__main__":
    analyze_pool_data()